<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>SCOM.UNIXComputerExtended</ID>
      <Version>1.0.0.0</Version>
    </Identity>
    <Name>SCOM.UNIXComputerExtended</Name>
    <References>
      <Reference Alias="MSWL">
        <ID>Microsoft.SystemCenter.WSManagement.Library</ID>
        <Version>7.1.10226.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Unix">
        <ID>Microsoft.Unix.Library</ID>
        <Version>7.5.1043.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="SCOM.UNIXComputerExtended.Class" Accessibility="Public" Abstract="false" Base="Unix!Microsoft.Unix.Computer" Hosted="false" Singleton="false" Extension="false">
          <Property ID="TIER" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="GROUPID" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="OWNER" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="SCOM.UNIXComputerExtended.Class.Discovery.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="Interval" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TargetSystem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />		  
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="SCOM.UNIXComputerExtended.Class.ShellCommandDiscovery.Datasource">
                <Interval>$Config/Interval$</Interval>
				<TargetSystem>$Config/TargetSystem$</TargetSystem>
                <ShellCommand>cat /opt/microsoft/scom.conf</ShellCommand>
                <Timeout>30</Timeout>
              </DataSource>
              <ProbeAction ID="PSDisco" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe">
                <ScriptName>SCOM.UNIXComputerExtended.Class.Discovery.Datasource.ps1</ScriptName>
                <ScriptBody>param($SourceId,$ManagedEntityId,$TargetSystem,$StdOut)

# For testing discovery manually in PowerShell:
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# $StdOut = "2,LINUX,kevinhol"
# $TargetSystem = "ubuntu.opsmgr.net"

#=================================================================================
# Constants section - modify stuff here:

# Assign script name variable for use in event logging
$ScriptName = "SCOM.UNIXComputerExtended.Class.Discovery.Datasource.ps1"
#=================================================================================

# Gather script start time
$StartTime = Get-Date             

# Gather who the script is running as
$WhoAmI = whoami

# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI

# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

# Log an event for the script starting			  
$momapi.LogScriptEvent($ScriptName,6666,0, "Script is starting. UNIX Computer: ($TargetSystem) StdOut: ($StdOut) Running, as $WhoAmI.")

# Clear any previous errors
if($Error)
  {
  $Error.Clear()
  }


#=================================================================================
# MAIN body of your script

if($StdOut -ne $null -and $StdOut -ne "0" -and $StdOut -ne "")
{
#	$StdOut = $CmdOutput.Replace([Environment]::newline,":")
	$Properties = $StdOut.Split(",")

    $TIER = $Properties[0]
    $GROUPID = $Properties[1]
    $OWNER = $Properties[2]

    # Create discovery data 
    $Inst = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.UNIXComputerExtended.Class']$")
    $Inst.AddProperty("$MPElement[Name='Unix!Microsoft.Unix.Computer']/PrincipalName$", $TargetSystem)
    $Inst.AddProperty("$MPElement[Name='SCOM.UNIXComputerExtended.Class']/TIER$", $TIER)
    $Inst.AddProperty("$MPElement[Name='SCOM.UNIXComputerExtended.Class']/GROUPID$", $GROUPID)
    $Inst.AddProperty("$MPElement[Name='SCOM.UNIXComputerExtended.Class']/OWNER$", $OWNER)
    $DiscoveryData.AddInstance($Inst)
#=================================================================================

# Return Discovery Items Normally
  $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE):
#  $momapi.Return($DiscoveryData)
}
Else
{
    # Log an event the StdOut was NULL
    $momapi.LogScriptEvent($ScriptName,6667,2, "StdOut was NULL.  Did not get any data from UNIX Shell Command")
}

# End script and record total runtime
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
# Log an event for script ending and total execution time.
$momapi.LogScriptEvent($ScriptName,6666,0, "Script has completed.  Runtime was $ScriptTime seconds")
</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SourceID</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityID</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>TargetSystem</Name>
                    <Value>$Config/TargetSystem$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>StdOut</Name>
                    <Value>$Data///*[local-name()="StdOut"]$</Value>
                  </Parameter>
			    </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSDisco">
                <Node ID="DS" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.UNIXComputerExtended.Class.ShellCommandDiscovery.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="Interval" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TargetSystem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />		  
          <xsd:element minOccurs="1" name="ShellCommand" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Timeout" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval>$Config/Interval$</Interval>
                    <SyncTime />
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="ProbeAction" TypeID="Unix!Microsoft.Unix.WSMan.Invoke.ProbeAction">
                <TargetSystem>$Config/TargetSystem$</TargetSystem>
                <Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem?__cimnamespace=root/scx</Uri>
                <Selector />
                <InvokeAction>ExecuteShellCommand</InvokeAction>
                <Input>&lt;p:ExecuteShellCommand_INPUT xmlns:p="http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem"&gt;&lt;p:command&gt;$Config/ShellCommand$&lt;/p:command&gt;&lt;p:timeout&gt;$Config/Timeout$&lt;/p:timeout&gt;&lt;/p:ExecuteShellCommand_INPUT&gt;</Input>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="ProbeAction">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>MSWL!Microsoft.SystemCenter.WSManagement.WSManData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="SCOM.UNIXComputerExtended.Class.Discovery" Enabled="true" Target="Unix!Microsoft.Unix.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.UNIXComputerExtended.Class" >
            <Property TypeID="SCOM.UNIXComputerExtended.Class" PropertyID="TIER" />
            <Property TypeID="SCOM.UNIXComputerExtended.Class" PropertyID="GROUPID" />
            <Property TypeID="SCOM.UNIXComputerExtended.Class" PropertyID="OWNER" />	
		  </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SCOM.UNIXComputerExtended.Class.Discovery.Datasource">
          <Interval>86400</Interval>
		  <TargetSystem>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem>
        </DataSource>
      </Discovery>
    </Discoveries>
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="SCOM.UNIXComputerExtended">
          <Name>SCOM UNIX Computer Extended MP</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.UNIXComputerExtended.Class">
          <Name>SCOM UNIX Computer Extended Class</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.UNIXComputerExtended.Class" SubElementID="TIER">
          <Name>TIER</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.UNIXComputerExtended.Class" SubElementID="GROUPID">
          <Name>GROUPID</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.UNIXComputerExtended.Class" SubElementID="OWNER">
          <Name>OWNER</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.UNIXComputerExtended.Class.Discovery">
          <Name>SCOM UNIX Computer Extended Class Discovery</Name>
          <Description></Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>